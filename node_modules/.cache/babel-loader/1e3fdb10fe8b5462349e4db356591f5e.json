{"ast":null,"code":"/*\r\nconst {Client} = require(\"pg\")\r\nconst express = require (\"express\")\r\nconst app = express();\r\napp.use(express.json())\r\n\r\nconst client = new Client({\r\n    \"user\": \"postgres\",\r\n    \"password\" : \"postgres\",\r\n    \"host\" : \"localhost\",\r\n    \"port\" : 5433,\r\n    \"database\" : \"postgres\"\r\n})\r\n\r\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`))\r\n\r\n\r\napp.post(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await createTodo(reqJson.todo)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.post(\"/crearlabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarusuario\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarUsuario(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.genero, reqJson.password, reqJson.recibo, reqJson.fecha_nacimiento, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresartrabajador\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarTrabajador(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.estado, reqJson.genero, reqJson.password, reqJson.fecha_nacimiento, reqJson.foto_documento, reqJson.foto_perfil, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/metodoPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await MetodoPago(reqJson.forma_pago, reqJson.banco, reqJson.fecha_vencimiento, reqJson.cvv, reqJson.num_tarjeta, reqJson.id_usuario)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarTrabajadores\", async (req, res) => {\r\n    const rows = await listarTrabajadores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerTrabajador(reqJson.id_trabajador);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerUsuario(reqJson.id_usuario);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerLabor\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerLabor(reqJson.id_labor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/login\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await Login(reqJson.id, reqJson.password);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarTrabajador(reqJson.campo, reqJson.id_trabajador, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarUsuario(reqJson.campo, reqJson.id_usuario, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/cambiarEstado\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarPago(reqJson.puntuacion_pago, reqJson.fecha_pago, reqJson.monto, reqJson.id_usuario, reqJson.id_trabajador, reqJson.id_labor, reqJson.horas)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success='fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarLabores\", async (req, res) => {\r\n    const rows = await ListarLabores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\n\r\napp.get(\"/listarUsuarios\", async (req, res) => {\r\n    const rows = await ListarUsuarios();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/listarPrecioLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPrecioLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPuntuacionDeLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/promedioPuntuacion\", async (req, res) => {\r\n    const rows = await PromedioPuntuacion();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/solicitarServicio\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await SolicitarServicio(reqJson.id_labor, reqJson.id_usuario, reqJson.id_trabajador, reqJson.descripcion)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/laboresDisponibles\", async (req, res) => {\r\n    const rows = await LaboresDisponibles();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/asociarLabores\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await AsociarLabores(reqJson.ids_labor, reqJson.id_trabajador, reqJson.precio)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.delete(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await deleteTodo(reqJson.id)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"))\r\n\r\nstart()\r\n\r\nasync function start() {\r\n    await connect();\r\n}\r\n\r\nasync function connect() {\r\n    try {\r\n        await client.connect();\r\n    }\r\n    catch(e) {\r\n        console.error(`Failed to connect ${e}`)\r\n    }\r\n}\r\n\r\nasync function listarTrabajadores() {\r\n    try {\r\n    const results = await client.query(\"SELECT * FROM Trabajador\");\r\n    return results.rows;\r\n    }\r\n    catch(e){\r\n        return [];\r\n    }\r\n}\r\n\r\nasync function createTodo(todoText){\r\n\r\n    try {\r\n        await client.query(\"insert into todos (text) values ($1)\", [todoText]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function deleteTodo(id){\r\n\r\n    try {\r\n        await client.query(\"delete from todos where id = $1\", [id]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento) {\r\n    try {\r\n        const text = 'INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);';\r\n        const values = [id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento];\r\n        const res = await client.query(text, values);\r\n        return 'usuario creado con exito'\r\n    } catch (e) {\r\n        return 'fallo al crear usuario'\r\n    }\r\n};\r\n\r\nasync function CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil) {\r\n    try {\r\n        const text = 'INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);';\r\n        const values = [id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil];\r\n        const res = await client.query(text, values);\r\n        return 'trabajador creado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear trabajador'\r\n    }\r\n};\r\n\r\nasync function CrearLabor(nombre, id_labor) {\r\n    try {\r\n        const text = 'INSERT INTO Labor VALUES($1, $2);';\r\n        const values = [nombre, id_labor];\r\n        const res = await client.query(text, values);\r\n        return 'labor creada con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear labor'\r\n    }\r\n};\r\n\r\nasync function CrearDireccion(id_direccion, longitud, latitud) {\r\n    try {\r\n        const text = 'INSERT INTO direccion VALUES($1, $2, $3);';\r\n        const values = [id_direccion, longitud, latitud];\r\n        const res = await client.query(text, values);\r\n        return 'direccion creada con exito'\r\n    } catch (e) {\r\n        return 'fallo'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionTrabajador VALUES($1, $2);';\r\n        const values = [id_direccion, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar direccion trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionUsuario VALUES($1, $2);';\r\n        const values = [id_direccion, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a usuario con exito'\r\n    } catch (e) {\r\n        return 'fallo asociar direccion usuario'\r\n    }\r\n};\r\n\r\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\r\n    try {\r\n        const text = 'INSERT INTO LaborTrabajador VALUES($1, $2, $3);';\r\n        const values = [id_labor, id_trabajador, precio];\r\n        const res = await client.query(text, values);\r\n        return 'asociar labor a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar labor trabajador'\r\n    }\r\n};\r\n\r\nasync function SolicitarServicio(id_labor, id_usuario, id_trabajador, descripcion) {\r\n    try {\r\n        const text = 'SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;';\r\n        const values = [id_labor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        \r\n        if(res.rows.length > 0) {\r\n            const newText = 'INSERT INTO Solicita VALUES($1, $2, $3, $4);';\r\n            const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\r\n            const newRes = await client.query(newText, newValues);\r\n            return 'solicitud de servicio con exito'\r\n            \r\n        } else {\r\n            return 'El trabajador no está disponible para realizar esta labor'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo la solicitud'\r\n    }\r\n};\r\n\r\nasync function IngresarPago(puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador, id_labor, horas) {\r\n    try {\r\n        const text = 'SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;';\r\n        const values = [id_labor, id_trabajador, id_usuario];\r\n        const res = await client.query(text, values);\r\n\r\n        if(res.rows.length > 0) {\r\n            const precio_hora = res.rows[0].precio_labor_trabajador * horas\r\n            if(monto < precio_hora){\r\n                return 'El pago es menor de lo esperado'\r\n                \r\n            } else {\r\n                const newText = 'INSERT INTO Pago VALUES($1, $2, $3, $4, $5);';\r\n                const newValues = [puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador];\r\n                const newRes = await client.query(newText, newValues);\r\n                return 'se pudo hacer el pago'\r\n                \r\n            }\r\n        } else {\r\n            return 'Ha ocurrido un error con el pago'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo el pago'\r\n    }\r\n};\r\n\r\nasync function MetodoPago(forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);';\r\n        const values = [forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'metodo de pago ingresado con exito'\r\n                \r\n    } catch (e) {\r\n        return 'fallo el metodo de pago'\r\n    }\r\n};\r\n\r\nasync function LaboresDisponibles() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor NATURAL JOIN LaborTrabajador');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function PromedioPuntuacion() {\r\n    try {\r\n        const res = await client.query('SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function CambiarEstado(estado, id_trabajador) {\r\n    try {\r\n        const text = 'UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2';\r\n        const values = [estado, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'estado cambiado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo el cambio de estado'\r\n    }\r\n};\r\n\r\nasync function ListarPrecioLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarPuntuacionDeLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarUsuarios() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Usuario');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarLabores() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerTrabajador(id_trabajador) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1';\r\n        const value = [id_trabajador];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerUsuario(id_usuario) {\r\n    try {\r\n        const text = 'SELECT * FROM Usuario WHERE id_usuario = $1';\r\n        const value = [id_usuario];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT * FROM Labor WHERE id_labor = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\r\n        const values = [nuevoValor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\r\n        const values = [nuevoValor, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function IngresarUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaUser = (await CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento));\r\n        if (creaUser === 'fallo al crear usuario') {\r\n            return 'fallo usuario'\r\n        }\r\n\r\n        const asocDirUser = (await AsociarDireccionUsuario(id_direccion, id_usuario));\r\n        if (asocDirUser === 'fallo asociar direccion usuario') {\r\n            return 'fallo asociar direccion usuario'\r\n        }\r\n        \r\n        return 'ingreso de usuario exitoso'\r\n    }\r\n    catch (e){\r\n        return 'fallo con el ingreso de usuario'\r\n    }\r\n};\r\n\r\nasync function IngresarTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaTrab = (await CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil));\r\n        if (creaTrab === 'fallo al crear trabajador') {\r\n            return 'fallo trabajador'\r\n        }\r\n\r\n        const asocDirTrab = (await AsociarDireccionTrabajador(id_direccion, id_trabajador));\r\n        if (asocDirTrab === 'fallo asociar direccion trabajador') {\r\n            return 'fallo asociar direccion trabajador'\r\n        }\r\n\r\n        return 'ingreso de trabj con exito'\r\n    }\r\n    catch (e){\r\n        return 'fallo al ingresar trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\r\n    try {\r\n        for (i = 0; i < ids_labor.length; i++) {\r\n            AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\r\n        }\r\n        return 'labores asociadas satisfactoriamente'\r\n    }\r\n    catch (e) {\r\n        return 'fallo';\r\n    }\r\n};\r\n\r\nasync function Login(email, contraseña) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2';\r\n        const value = [email, contraseña];\r\n        const res = await client.query(text, value);\r\n\r\n        if (res.rows.length > 0) {\r\n            return 'El trabajador inicio sesion satisfactoriamente'\r\n        } else {\r\n            const text = 'SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2';\r\n            const value = [email, contraseña];\r\n            const res = await client.query(text, value);\r\n            \r\n            if (res.rows.length > 0) {\r\n                return 'El usuario inicio sesion satisfactoriamente'\r\n            } else {\r\n                return 'fallo'\r\n            }\r\n        }    \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n*/","map":{"version":3,"sources":["D:/Juanescacha/Archivos/Universidad/2019-II/Bases de Datos/PROYECTO FINAL/react/mande/src/server/server.js"],"names":[],"mappings":"AAAA","sourcesContent":["/*\r\nconst {Client} = require(\"pg\")\r\nconst express = require (\"express\")\r\nconst app = express();\r\napp.use(express.json())\r\n\r\nconst client = new Client({\r\n    \"user\": \"postgres\",\r\n    \"password\" : \"postgres\",\r\n    \"host\" : \"localhost\",\r\n    \"port\" : 5433,\r\n    \"database\" : \"postgres\"\r\n})\r\n\r\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`))\r\n\r\n\r\napp.post(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await createTodo(reqJson.todo)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.post(\"/crearlabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarusuario\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarUsuario(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.genero, reqJson.password, reqJson.recibo, reqJson.fecha_nacimiento, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresartrabajador\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarTrabajador(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.estado, reqJson.genero, reqJson.password, reqJson.fecha_nacimiento, reqJson.foto_documento, reqJson.foto_perfil, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/metodoPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await MetodoPago(reqJson.forma_pago, reqJson.banco, reqJson.fecha_vencimiento, reqJson.cvv, reqJson.num_tarjeta, reqJson.id_usuario)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarTrabajadores\", async (req, res) => {\r\n    const rows = await listarTrabajadores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerTrabajador(reqJson.id_trabajador);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerUsuario(reqJson.id_usuario);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerLabor\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerLabor(reqJson.id_labor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/login\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await Login(reqJson.id, reqJson.password);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarTrabajador(reqJson.campo, reqJson.id_trabajador, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarUsuario(reqJson.campo, reqJson.id_usuario, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/cambiarEstado\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarPago(reqJson.puntuacion_pago, reqJson.fecha_pago, reqJson.monto, reqJson.id_usuario, reqJson.id_trabajador, reqJson.id_labor, reqJson.horas)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success='fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarLabores\", async (req, res) => {\r\n    const rows = await ListarLabores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\n\r\napp.get(\"/listarUsuarios\", async (req, res) => {\r\n    const rows = await ListarUsuarios();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/listarPrecioLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPrecioLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPuntuacionDeLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/promedioPuntuacion\", async (req, res) => {\r\n    const rows = await PromedioPuntuacion();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/solicitarServicio\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await SolicitarServicio(reqJson.id_labor, reqJson.id_usuario, reqJson.id_trabajador, reqJson.descripcion)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/laboresDisponibles\", async (req, res) => {\r\n    const rows = await LaboresDisponibles();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/asociarLabores\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await AsociarLabores(reqJson.ids_labor, reqJson.id_trabajador, reqJson.precio)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.delete(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await deleteTodo(reqJson.id)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"))\r\n\r\nstart()\r\n\r\nasync function start() {\r\n    await connect();\r\n}\r\n\r\nasync function connect() {\r\n    try {\r\n        await client.connect();\r\n    }\r\n    catch(e) {\r\n        console.error(`Failed to connect ${e}`)\r\n    }\r\n}\r\n\r\nasync function listarTrabajadores() {\r\n    try {\r\n    const results = await client.query(\"SELECT * FROM Trabajador\");\r\n    return results.rows;\r\n    }\r\n    catch(e){\r\n        return [];\r\n    }\r\n}\r\n\r\nasync function createTodo(todoText){\r\n\r\n    try {\r\n        await client.query(\"insert into todos (text) values ($1)\", [todoText]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function deleteTodo(id){\r\n\r\n    try {\r\n        await client.query(\"delete from todos where id = $1\", [id]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento) {\r\n    try {\r\n        const text = 'INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);';\r\n        const values = [id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento];\r\n        const res = await client.query(text, values);\r\n        return 'usuario creado con exito'\r\n    } catch (e) {\r\n        return 'fallo al crear usuario'\r\n    }\r\n};\r\n\r\nasync function CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil) {\r\n    try {\r\n        const text = 'INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);';\r\n        const values = [id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil];\r\n        const res = await client.query(text, values);\r\n        return 'trabajador creado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear trabajador'\r\n    }\r\n};\r\n\r\nasync function CrearLabor(nombre, id_labor) {\r\n    try {\r\n        const text = 'INSERT INTO Labor VALUES($1, $2);';\r\n        const values = [nombre, id_labor];\r\n        const res = await client.query(text, values);\r\n        return 'labor creada con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear labor'\r\n    }\r\n};\r\n\r\nasync function CrearDireccion(id_direccion, longitud, latitud) {\r\n    try {\r\n        const text = 'INSERT INTO direccion VALUES($1, $2, $3);';\r\n        const values = [id_direccion, longitud, latitud];\r\n        const res = await client.query(text, values);\r\n        return 'direccion creada con exito'\r\n    } catch (e) {\r\n        return 'fallo'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionTrabajador VALUES($1, $2);';\r\n        const values = [id_direccion, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar direccion trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionUsuario VALUES($1, $2);';\r\n        const values = [id_direccion, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a usuario con exito'\r\n    } catch (e) {\r\n        return 'fallo asociar direccion usuario'\r\n    }\r\n};\r\n\r\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\r\n    try {\r\n        const text = 'INSERT INTO LaborTrabajador VALUES($1, $2, $3);';\r\n        const values = [id_labor, id_trabajador, precio];\r\n        const res = await client.query(text, values);\r\n        return 'asociar labor a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar labor trabajador'\r\n    }\r\n};\r\n\r\nasync function SolicitarServicio(id_labor, id_usuario, id_trabajador, descripcion) {\r\n    try {\r\n        const text = 'SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;';\r\n        const values = [id_labor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        \r\n        if(res.rows.length > 0) {\r\n            const newText = 'INSERT INTO Solicita VALUES($1, $2, $3, $4);';\r\n            const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\r\n            const newRes = await client.query(newText, newValues);\r\n            return 'solicitud de servicio con exito'\r\n            \r\n        } else {\r\n            return 'El trabajador no está disponible para realizar esta labor'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo la solicitud'\r\n    }\r\n};\r\n\r\nasync function IngresarPago(puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador, id_labor, horas) {\r\n    try {\r\n        const text = 'SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;';\r\n        const values = [id_labor, id_trabajador, id_usuario];\r\n        const res = await client.query(text, values);\r\n\r\n        if(res.rows.length > 0) {\r\n            const precio_hora = res.rows[0].precio_labor_trabajador * horas\r\n            if(monto < precio_hora){\r\n                return 'El pago es menor de lo esperado'\r\n                \r\n            } else {\r\n                const newText = 'INSERT INTO Pago VALUES($1, $2, $3, $4, $5);';\r\n                const newValues = [puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador];\r\n                const newRes = await client.query(newText, newValues);\r\n                return 'se pudo hacer el pago'\r\n                \r\n            }\r\n        } else {\r\n            return 'Ha ocurrido un error con el pago'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo el pago'\r\n    }\r\n};\r\n\r\nasync function MetodoPago(forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);';\r\n        const values = [forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'metodo de pago ingresado con exito'\r\n                \r\n    } catch (e) {\r\n        return 'fallo el metodo de pago'\r\n    }\r\n};\r\n\r\nasync function LaboresDisponibles() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor NATURAL JOIN LaborTrabajador');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function PromedioPuntuacion() {\r\n    try {\r\n        const res = await client.query('SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function CambiarEstado(estado, id_trabajador) {\r\n    try {\r\n        const text = 'UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2';\r\n        const values = [estado, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'estado cambiado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo el cambio de estado'\r\n    }\r\n};\r\n\r\nasync function ListarPrecioLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarPuntuacionDeLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarUsuarios() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Usuario');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarLabores() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerTrabajador(id_trabajador) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1';\r\n        const value = [id_trabajador];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerUsuario(id_usuario) {\r\n    try {\r\n        const text = 'SELECT * FROM Usuario WHERE id_usuario = $1';\r\n        const value = [id_usuario];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT * FROM Labor WHERE id_labor = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\r\n        const values = [nuevoValor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\r\n        const values = [nuevoValor, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function IngresarUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaUser = (await CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento));\r\n        if (creaUser === 'fallo al crear usuario') {\r\n            return 'fallo usuario'\r\n        }\r\n\r\n        const asocDirUser = (await AsociarDireccionUsuario(id_direccion, id_usuario));\r\n        if (asocDirUser === 'fallo asociar direccion usuario') {\r\n            return 'fallo asociar direccion usuario'\r\n        }\r\n        \r\n        return 'ingreso de usuario exitoso'\r\n    }\r\n    catch (e){\r\n        return 'fallo con el ingreso de usuario'\r\n    }\r\n};\r\n\r\nasync function IngresarTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaTrab = (await CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil));\r\n        if (creaTrab === 'fallo al crear trabajador') {\r\n            return 'fallo trabajador'\r\n        }\r\n\r\n        const asocDirTrab = (await AsociarDireccionTrabajador(id_direccion, id_trabajador));\r\n        if (asocDirTrab === 'fallo asociar direccion trabajador') {\r\n            return 'fallo asociar direccion trabajador'\r\n        }\r\n\r\n        return 'ingreso de trabj con exito'\r\n    }\r\n    catch (e){\r\n        return 'fallo al ingresar trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\r\n    try {\r\n        for (i = 0; i < ids_labor.length; i++) {\r\n            AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\r\n        }\r\n        return 'labores asociadas satisfactoriamente'\r\n    }\r\n    catch (e) {\r\n        return 'fallo';\r\n    }\r\n};\r\n\r\nasync function Login(email, contraseña) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2';\r\n        const value = [email, contraseña];\r\n        const res = await client.query(text, value);\r\n\r\n        if (res.rows.length > 0) {\r\n            return 'El trabajador inicio sesion satisfactoriamente'\r\n        } else {\r\n            const text = 'SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2';\r\n            const value = [email, contraseña];\r\n            const res = await client.query(text, value);\r\n            \r\n            if (res.rows.length > 0) {\r\n                return 'El usuario inicio sesion satisfactoriamente'\r\n            } else {\r\n                return 'fallo'\r\n            }\r\n        }    \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}