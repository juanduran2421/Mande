{"ast":null,"code":"const {\n  Client\n} = require(\"pg\");\n\nconst express = require(\"express\");\n\nconst app = express();\napp.use(express.json());\nconst client = new Client({\n  \"user\": \"postgres\",\n  \"password\": \"postgres\",\n  \"host\": \"localhost\",\n  \"port\": 5433,\n  \"database\": \"postgres\"\n});\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`));\napp.post(\"/todos\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    await createTodo(reqJson.todo);\n    result.success = true;\n  } catch (e) {\n    result.success = false;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/crearlabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id);\n    result.success = cre;\n  } catch (e) {\n    result.success = cre;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresarusuario\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarUsuario(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.genero, reqJson.password, reqJson.recibo, reqJson.fecha_nacimiento, reqJson.id_direccion, reqJson.longitud, reqJson.latitud);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresartrabajador\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarTrabajador(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.estado, reqJson.genero, reqJson.password, reqJson.fecha_nacimiento, reqJson.foto_documento, reqJson.foto_perfil, reqJson.id_direccion, reqJson.longitud, reqJson.latitud);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/metodoPago\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await MetodoPago(reqJson.forma_pago, reqJson.banco, reqJson.fecha_vencimiento, reqJson.cvv, reqJson.num_tarjeta, reqJson.id_usuario);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarTrabajadores\", async (req, res) => {\n  const rows = await listarTrabajadores();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerTrabajador\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerTrabajador(reqJson.id_trabajador);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerUsuario\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerUsuario(reqJson.id_usuario);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerLabor\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerLabor(reqJson.id_labor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/login\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await Login(reqJson.id, reqJson.password);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/actualizarTrabajador\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ActualizarTrabajador(reqJson.campo, reqJson.id_trabajador, reqJson.nuevoValor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/actualizarUsuario\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ActualizarUsuario(reqJson.campo, reqJson.id_usuario, reqJson.nuevoValor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.post(\"/cambiarEstado\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresarPago\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarPago(reqJson.puntuacion_pago, reqJson.fecha_pago, reqJson.monto, reqJson.id_usuario, reqJson.id_trabajador, reqJson.id_labor, reqJson.horas);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarLabores\", async (req, res) => {\n  const rows = await ListarLabores();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/listarUsuarios\", async (req, res) => {\n  const rows = await ListarUsuarios();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/listarPrecioLabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await ListarPrecioLabor(reqJson.id_labor);\n    result.success = cre;\n  } catch (e) {\n    result.success = cre;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await ListarPuntuacionDeLabor(reqJson.id_labor);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/promedioPuntuacion\", async (req, res) => {\n  const rows = await PromedioPuntuacion();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.post(\"/solicitarServicio\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await SolicitarServicio(reqJson.id_labor, reqJson.id_usuario, reqJson.id_trabajador, reqJson.descripcion);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/laboresDisponibles\", async (req, res) => {\n  const rows = await LaboresDisponibles();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/asociarLabores\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await AsociarLabores(reqJson.ids_labor, reqJson.id_trabajador, reqJson.precio);\n    result.success = cre;\n  } catch (e) {\n    result.success = 'fallo';\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.delete(\"/todos\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    await deleteTodo(reqJson.id);\n    result.success = true;\n  } catch (e) {\n    result.success = false;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"));\nstart();\n\nasync function start() {\n  await connect();\n}\n\nasync function connect() {\n  try {\n    await client.connect();\n  } catch (e) {\n    console.error(`Failed to connect ${e}`);\n  }\n}\n\nasync function listarTrabajadores() {\n  try {\n    const results = await client.query(\"SELECT * FROM Trabajador\");\n    return results.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function createTodo(todoText) {\n  try {\n    await client.query(\"insert into todos (text) values ($1)\", [todoText]);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function deleteTodo(id) {\n  try {\n    await client.query(\"delete from todos where id = $1\", [id]);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento) {\n  try {\n    const text = 'INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);';\n    const values = [id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento];\n    const res = await client.query(text, values);\n    return 'usuario creado con exito';\n  } catch (e) {\n    return 'fallo al crear usuario';\n  }\n}\n\n;\n\nasync function CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil) {\n  try {\n    const text = 'INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);';\n    const values = [id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil];\n    const res = await client.query(text, values);\n    return 'trabajador creado con exito';\n  } catch (e) {\n    return 'fallo al crear trabajador';\n  }\n}\n\n;\n\nasync function CrearLabor(nombre, id_labor) {\n  try {\n    const text = 'INSERT INTO Labor VALUES($1, $2);';\n    const values = [nombre, id_labor];\n    const res = await client.query(text, values);\n    return 'labor creada con exito';\n  } catch (e) {\n    return 'fallo al crear labor';\n  }\n}\n\n;\n\nasync function CrearDireccion(id_direccion, longitud, latitud) {\n  try {\n    const text = 'INSERT INTO direccion VALUES($1, $2, $3);';\n    const values = [id_direccion, longitud, latitud];\n    const res = await client.query(text, values);\n    return 'direccion creada con exito';\n  } catch (e) {\n    return 'fallo';\n  }\n}\n\n;\n\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\n  try {\n    const text = 'INSERT INTO DireccionTrabajador VALUES($1, $2);';\n    const values = [id_direccion, id_trabajador];\n    const res = await client.query(text, values);\n    return 'asociar direccion a trabajador con exito';\n  } catch (e) {\n    return 'fallo asociar direccion trabajador';\n  }\n}\n\n;\n\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\n  try {\n    const text = 'INSERT INTO DireccionUsuario VALUES($1, $2);';\n    const values = [id_direccion, id_usuario];\n    const res = await client.query(text, values);\n    return 'asociar direccion a usuario con exito';\n  } catch (e) {\n    return 'fallo asociar direccion usuario';\n  }\n}\n\n;\n\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\n  try {\n    const text = 'INSERT INTO LaborTrabajador VALUES($1, $2, $3);';\n    const values = [id_labor, id_trabajador, precio];\n    const res = await client.query(text, values);\n    return 'asociar labor a trabajador con exito';\n  } catch (e) {\n    return 'fallo asociar labor trabajador';\n  }\n}\n\n;\n\nasync function SolicitarServicio(id_labor, id_usuario, id_trabajador, descripcion) {\n  try {\n    const text = 'SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;';\n    const values = [id_labor, id_trabajador];\n    const res = await client.query(text, values);\n\n    if (res.rows.length > 0) {\n      const newText = 'INSERT INTO Solicita VALUES($1, $2, $3, $4);';\n      const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\n      const newRes = await client.query(newText, newValues);\n      return 'solicitud de servicio con exito';\n    } else {\n      return 'El trabajador no está disponible para realizar esta labor';\n    }\n  } catch (e) {\n    return 'fallo la solicitud';\n  }\n}\n\n;\n\nasync function IngresarPago(puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador, id_labor, horas) {\n  try {\n    const text = 'SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;';\n    const values = [id_labor, id_trabajador, id_usuario];\n    const res = await client.query(text, values);\n\n    if (res.rows.length > 0) {\n      const precio_hora = res.rows[0].precio_labor_trabajador * horas;\n\n      if (monto < precio_hora) {\n        return 'El pago es menor de lo esperado';\n      } else {\n        const newText = 'INSERT INTO Pago VALUES($1, $2, $3, $4, $5);';\n        const newValues = [puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador];\n        const newRes = await client.query(newText, newValues);\n        return 'se pudo hacer el pago';\n      }\n    } else {\n      return 'Ha ocurrido un error con el pago';\n    }\n  } catch (e) {\n    return 'fallo el pago';\n  }\n}\n\n;\n\nasync function MetodoPago(forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario) {\n  try {\n    const text = 'INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);';\n    const values = [forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario];\n    const res = await client.query(text, values);\n    return 'metodo de pago ingresado con exito';\n  } catch (e) {\n    return 'fallo el metodo de pago';\n  }\n}\n\n;\n\nasync function LaboresDisponibles() {\n  try {\n    const res = await client.query('SELECT * FROM Labor NATURAL JOIN LaborTrabajador');\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function PromedioPuntuacion() {\n  try {\n    const res = await client.query('SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC');\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function CambiarEstado(estado, id_trabajador) {\n  try {\n    const text = 'UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2';\n    const values = [estado, id_trabajador];\n    const res = await client.query(text, values);\n    return 'estado cambiado con exito';\n  } catch (e) {\n    return 'fallo el cambio de estado';\n  }\n}\n\n;\n\nasync function ListarPrecioLabor(id_labor) {\n  try {\n    const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ListarPuntuacionDeLabor(id_labor) {\n  try {\n    const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ListarUsuarios() {\n  try {\n    const res = await client.query('SELECT * FROM Usuario');\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ListarLabores() {\n  try {\n    const res = await client.query('SELECT * FROM Labor');\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ObtenerTrabajador(id_trabajador) {\n  try {\n    const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1';\n    const value = [id_trabajador];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ObtenerUsuario(id_usuario) {\n  try {\n    const text = 'SELECT * FROM Usuario WHERE id_usuario = $1';\n    const value = [id_usuario];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ObtenerLabor(id_labor) {\n  try {\n    const text = 'SELECT * FROM Labor WHERE id_labor = $1';\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\n;\n\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\n  try {\n    const text = \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\n    const values = [nuevoValor, id_trabajador];\n    const res = await client.query(text, values);\n    return 'actualizado con exito';\n  } catch (e) {\n    return 'fallo al actualizar';\n  }\n}\n\n;\n\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\n  try {\n    const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\n    const values = [nuevoValor, id_usuario];\n    const res = await client.query(text, values);\n    return 'actualizado con exito';\n  } catch (e) {\n    return 'fallo al actualizar';\n  }\n}\n\n;\n\nasync function IngresarUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento, id_direccion, longitud, latitud) {\n  try {\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\n\n    if (creaDir === 'fallo') {\n      return 'fallo direccion';\n    }\n\n    const creaUser = await CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento);\n\n    if (creaUser === 'fallo al crear usuario') {\n      return 'fallo usuario';\n    }\n\n    const asocDirUser = await AsociarDireccionUsuario(id_direccion, id_usuario);\n\n    if (asocDirUser === 'fallo asociar direccion usuario') {\n      return 'fallo asociar direccion usuario';\n    }\n\n    return 'ingreso de usuario exitoso';\n  } catch (e) {\n    return 'fallo con el ingreso de usuario';\n  }\n}\n\n;\n\nasync function IngresarTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil, id_direccion, longitud, latitud) {\n  try {\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\n\n    if (creaDir === 'fallo') {\n      return 'fallo direccion';\n    }\n\n    const creaTrab = await CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil);\n\n    if (creaTrab === 'fallo al crear trabajador') {\n      return 'fallo trabajador';\n    }\n\n    const asocDirTrab = await AsociarDireccionTrabajador(id_direccion, id_trabajador);\n\n    if (asocDirTrab === 'fallo asociar direccion trabajador') {\n      return 'fallo asociar direccion trabajador';\n    }\n\n    return 'ingreso de trabj con exito';\n  } catch (e) {\n    return 'fallo al ingresar trabajador';\n  }\n}\n\n;\n\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\n  try {\n    for (i = 0; i < ids_labor.length; i++) {\n      AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\n    }\n\n    return 'labores asociadas satisfactoriamente';\n  } catch (e) {\n    return 'fallo';\n  }\n}\n\n;\n\nasync function Login(email, contraseña) {\n  try {\n    const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2';\n    const value = [email, contraseña];\n    const res = await client.query(text, value);\n\n    if (res.rows.length > 0) {\n      return 'El trabajador inicio sesion satisfactoriamente';\n    } else {\n      const text = 'SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2';\n      const value = [email, contraseña];\n      const res = await client.query(text, value);\n\n      if (res.rows.length > 0) {\n        return 'El usuario inicio sesion satisfactoriamente';\n      } else {\n        return 'fallo';\n      }\n    }\n  } catch (e) {\n    return [];\n  }\n}\n\n;","map":{"version":3,"sources":["D:/Juanescacha/Archivos/Universidad/2019-II/Bases de Datos/PROYECTO FINAL/react/mande/src/server/server.js"],"names":["Client","require","express","app","use","json","client","get","req","res","sendFile","__dirname","post","result","reqJson","body","createTodo","todo","success","e","setHeader","send","JSON","stringify","cre","CrearLabor","nombre_labor","labor_id","IngresarUsuario","email","celular","nombre","genero","password","recibo","fecha_nacimiento","id_direccion","longitud","latitud","IngresarTrabajador","estado","foto_documento","foto_perfil","MetodoPago","forma_pago","banco","fecha_vencimiento","cvv","num_tarjeta","id_usuario","rows","listarTrabajadores","ObtenerTrabajador","id_trabajador","ObtenerUsuario","ObtenerLabor","id_labor","Login","id","put","ActualizarTrabajador","campo","nuevoValor","ActualizarUsuario","CambiarEstado","IngresarPago","puntuacion_pago","fecha_pago","monto","horas","ListarLabores","ListarUsuarios","ListarPrecioLabor","ListarPuntuacionDeLabor","PromedioPuntuacion","SolicitarServicio","descripcion","LaboresDisponibles","AsociarLabores","ids_labor","precio","delete","deleteTodo","listen","console","log","start","connect","error","results","query","todoText","CrearUsuario","pass","fNacimiento","text","values","CrearTrabajador","fotoDocumento","fotoPerfil","CrearDireccion","AsociarDireccionTrabajador","AsociarDireccionUsuario","AsociarLaborTrabajador","length","newText","newValues","newRes","precio_hora","precio_labor_trabajador","value","creaDir","creaUser","asocDirUser","creaTrab","asocDirTrab","i","contraseña"],"mappings":"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","sourcesContent":["const {Client} = require(\"pg\")\r\nconst express = require (\"express\")\r\nconst app = express();\r\napp.use(express.json())\r\n\r\nconst client = new Client({\r\n    \"user\": \"postgres\",\r\n    \"password\" : \"postgres\",\r\n    \"host\" : \"localhost\",\r\n    \"port\" : 5433,\r\n    \"database\" : \"postgres\"\r\n})\r\n\r\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`))\r\n\r\n\r\napp.post(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await createTodo(reqJson.todo)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.post(\"/crearlabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarusuario\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarUsuario(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.genero, reqJson.password, reqJson.recibo, reqJson.fecha_nacimiento, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresartrabajador\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarTrabajador(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.estado, reqJson.genero, reqJson.password, reqJson.fecha_nacimiento, reqJson.foto_documento, reqJson.foto_perfil, reqJson.id_direccion, reqJson.longitud, reqJson.latitud)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/metodoPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await MetodoPago(reqJson.forma_pago, reqJson.banco, reqJson.fecha_vencimiento, reqJson.cvv, reqJson.num_tarjeta, reqJson.id_usuario)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarTrabajadores\", async (req, res) => {\r\n    const rows = await listarTrabajadores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerTrabajador(reqJson.id_trabajador);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerUsuario(reqJson.id_usuario);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/obtenerLabor\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ObtenerLabor(reqJson.id_labor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/login\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await Login(reqJson.id, reqJson.password);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarTrabajador\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarTrabajador(reqJson.campo, reqJson.id_trabajador, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/actualizarUsuario\", async (req, res) => {\r\n    const reqJson = req.body;\r\n    const rows = await ActualizarUsuario(reqJson.campo, reqJson.id_usuario, reqJson.nuevoValor);\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/cambiarEstado\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.post(\"/ingresarPago\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await IngresarPago(reqJson.puntuacion_pago, reqJson.fecha_pago, reqJson.monto, reqJson.id_usuario, reqJson.id_trabajador, reqJson.id_labor, reqJson.horas)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success='fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarLabores\", async (req, res) => {\r\n    const rows = await ListarLabores();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\n\r\napp.get(\"/listarUsuarios\", async (req, res) => {\r\n    const rows = await ListarUsuarios();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.get(\"/listarPrecioLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPrecioLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success=cre;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await ListarPuntuacionDeLabor(reqJson.id_labor)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/promedioPuntuacion\", async (req, res) => {\r\n    const rows = await PromedioPuntuacion();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.post(\"/solicitarServicio\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await SolicitarServicio(reqJson.id_labor, reqJson.id_usuario, reqJson.id_trabajador, reqJson.descripcion)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.get(\"/laboresDisponibles\", async (req, res) => {\r\n    const rows = await LaboresDisponibles();\r\n    res.setHeader(\"content-type\", \"application/json\")\r\n    res.send(JSON.stringify(rows))\r\n})\r\n\r\napp.put(\"/asociarLabores\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n        const reqJson = req.body;\r\n        const cre = await AsociarLabores(reqJson.ids_labor, reqJson.id_trabajador, reqJson.precio)\r\n        result.success= cre;\r\n    }\r\n    catch(e){\r\n        result.success= 'fallo';\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n})\r\n\r\napp.delete(\"/todos\", async (req, res) => {\r\n    let result = {}\r\n    try{\r\n\r\n        const reqJson = req.body;\r\n        await deleteTodo(reqJson.id)\r\n        result.success= true;\r\n    }\r\n    catch(e){\r\n        result.success=false;\r\n    }\r\n    finally{\r\n        res.setHeader(\"content-type\", \"application/json\")\r\n        res.send(JSON.stringify(result))\r\n    }\r\n   \r\n})\r\n\r\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"))\r\n\r\nstart()\r\n\r\nasync function start() {\r\n    await connect();\r\n}\r\n\r\nasync function connect() {\r\n    try {\r\n        await client.connect();\r\n    }\r\n    catch(e) {\r\n        console.error(`Failed to connect ${e}`)\r\n    }\r\n}\r\n\r\nasync function listarTrabajadores() {\r\n    try {\r\n    const results = await client.query(\"SELECT * FROM Trabajador\");\r\n    return results.rows;\r\n    }\r\n    catch(e){\r\n        return [];\r\n    }\r\n}\r\n\r\nasync function createTodo(todoText){\r\n\r\n    try {\r\n        await client.query(\"insert into todos (text) values ($1)\", [todoText]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function deleteTodo(id){\r\n\r\n    try {\r\n        await client.query(\"delete from todos where id = $1\", [id]);\r\n        return true\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n}\r\n\r\nasync function CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento) {\r\n    try {\r\n        const text = 'INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);';\r\n        const values = [id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento];\r\n        const res = await client.query(text, values);\r\n        return 'usuario creado con exito'\r\n    } catch (e) {\r\n        return 'fallo al crear usuario'\r\n    }\r\n};\r\n\r\nasync function CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil) {\r\n    try {\r\n        const text = 'INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);';\r\n        const values = [id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil];\r\n        const res = await client.query(text, values);\r\n        return 'trabajador creado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear trabajador'\r\n    }\r\n};\r\n\r\nasync function CrearLabor(nombre, id_labor) {\r\n    try {\r\n        const text = 'INSERT INTO Labor VALUES($1, $2);';\r\n        const values = [nombre, id_labor];\r\n        const res = await client.query(text, values);\r\n        return 'labor creada con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al crear labor'\r\n    }\r\n};\r\n\r\nasync function CrearDireccion(id_direccion, longitud, latitud) {\r\n    try {\r\n        const text = 'INSERT INTO direccion VALUES($1, $2, $3);';\r\n        const values = [id_direccion, longitud, latitud];\r\n        const res = await client.query(text, values);\r\n        return 'direccion creada con exito'\r\n    } catch (e) {\r\n        return 'fallo'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionTrabajador VALUES($1, $2);';\r\n        const values = [id_direccion, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar direccion trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO DireccionUsuario VALUES($1, $2);';\r\n        const values = [id_direccion, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'asociar direccion a usuario con exito'\r\n    } catch (e) {\r\n        return 'fallo asociar direccion usuario'\r\n    }\r\n};\r\n\r\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\r\n    try {\r\n        const text = 'INSERT INTO LaborTrabajador VALUES($1, $2, $3);';\r\n        const values = [id_labor, id_trabajador, precio];\r\n        const res = await client.query(text, values);\r\n        return 'asociar labor a trabajador con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo asociar labor trabajador'\r\n    }\r\n};\r\n\r\nasync function SolicitarServicio(id_labor, id_usuario, id_trabajador, descripcion) {\r\n    try {\r\n        const text = 'SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;';\r\n        const values = [id_labor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        \r\n        if(res.rows.length > 0) {\r\n            const newText = 'INSERT INTO Solicita VALUES($1, $2, $3, $4);';\r\n            const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\r\n            const newRes = await client.query(newText, newValues);\r\n            return 'solicitud de servicio con exito'\r\n            \r\n        } else {\r\n            return 'El trabajador no está disponible para realizar esta labor'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo la solicitud'\r\n    }\r\n};\r\n\r\nasync function IngresarPago(puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador, id_labor, horas) {\r\n    try {\r\n        const text = 'SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;';\r\n        const values = [id_labor, id_trabajador, id_usuario];\r\n        const res = await client.query(text, values);\r\n\r\n        if(res.rows.length > 0) {\r\n            const precio_hora = res.rows[0].precio_labor_trabajador * horas\r\n            if(monto < precio_hora){\r\n                return 'El pago es menor de lo esperado'\r\n                \r\n            } else {\r\n                const newText = 'INSERT INTO Pago VALUES($1, $2, $3, $4, $5);';\r\n                const newValues = [puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador];\r\n                const newRes = await client.query(newText, newValues);\r\n                return 'se pudo hacer el pago'\r\n                \r\n            }\r\n        } else {\r\n            return 'Ha ocurrido un error con el pago'\r\n        }\r\n    } catch (e) {\r\n        return 'fallo el pago'\r\n    }\r\n};\r\n\r\nasync function MetodoPago(forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario) {\r\n    try {\r\n        const text = 'INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);';\r\n        const values = [forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'metodo de pago ingresado con exito'\r\n                \r\n    } catch (e) {\r\n        return 'fallo el metodo de pago'\r\n    }\r\n};\r\n\r\nasync function LaboresDisponibles() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor NATURAL JOIN LaborTrabajador');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function PromedioPuntuacion() {\r\n    try {\r\n        const res = await client.query('SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function CambiarEstado(estado, id_trabajador) {\r\n    try {\r\n        const text = 'UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2';\r\n        const values = [estado, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'estado cambiado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo el cambio de estado'\r\n    }\r\n};\r\n\r\nasync function ListarPrecioLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarPuntuacionDeLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarUsuarios() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Usuario');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ListarLabores() {\r\n    try {\r\n        const res = await client.query('SELECT * FROM Labor');\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerTrabajador(id_trabajador) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1';\r\n        const value = [id_trabajador];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerUsuario(id_usuario) {\r\n    try {\r\n        const text = 'SELECT * FROM Usuario WHERE id_usuario = $1';\r\n        const value = [id_usuario];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ObtenerLabor(id_labor) {\r\n    try {\r\n        const text = 'SELECT * FROM Labor WHERE id_labor = $1';\r\n        const value = [id_labor];\r\n        const res = await client.query(text, value);\r\n        return res.rows\r\n        \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\r\n        const values = [nuevoValor, id_trabajador];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\r\n    try {\r\n        const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\r\n        const values = [nuevoValor, id_usuario];\r\n        const res = await client.query(text, values);\r\n        return 'actualizado con exito'\r\n        \r\n    } catch (e) {\r\n        return 'fallo al actualizar'\r\n    }\r\n};\r\n\r\nasync function IngresarUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaUser = (await CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento));\r\n        if (creaUser === 'fallo al crear usuario') {\r\n            return 'fallo usuario'\r\n        }\r\n\r\n        const asocDirUser = (await AsociarDireccionUsuario(id_direccion, id_usuario));\r\n        if (asocDirUser === 'fallo asociar direccion usuario') {\r\n            return 'fallo asociar direccion usuario'\r\n        }\r\n        \r\n        return 'ingreso de usuario exitoso'\r\n    }\r\n    catch (e){\r\n        return 'fallo con el ingreso de usuario'\r\n    }\r\n};\r\n\r\nasync function IngresarTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil, id_direccion, longitud, latitud) {\r\n    try {\r\n        const creaDir = (await CrearDireccion(id_direccion, longitud, latitud));\r\n        if (creaDir === 'fallo') {\r\n            return 'fallo direccion'\r\n        }\r\n\r\n        const creaTrab = (await CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil));\r\n        if (creaTrab === 'fallo al crear trabajador') {\r\n            return 'fallo trabajador'\r\n        }\r\n\r\n        const asocDirTrab = (await AsociarDireccionTrabajador(id_direccion, id_trabajador));\r\n        if (asocDirTrab === 'fallo asociar direccion trabajador') {\r\n            return 'fallo asociar direccion trabajador'\r\n        }\r\n\r\n        return 'ingreso de trabj con exito'\r\n    }\r\n    catch (e){\r\n        return 'fallo al ingresar trabajador'\r\n    }\r\n};\r\n\r\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\r\n    try {\r\n        for (i = 0; i < ids_labor.length; i++) {\r\n            AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\r\n        }\r\n        return 'labores asociadas satisfactoriamente'\r\n    }\r\n    catch (e) {\r\n        return 'fallo';\r\n    }\r\n};\r\n\r\nasync function Login(email, contraseña) {\r\n    try {\r\n        const text = 'SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2';\r\n        const value = [email, contraseña];\r\n        const res = await client.query(text, value);\r\n\r\n        if (res.rows.length > 0) {\r\n            return 'El trabajador inicio sesion satisfactoriamente'\r\n        } else {\r\n            const text = 'SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2';\r\n            const value = [email, contraseña];\r\n            const res = await client.query(text, value);\r\n            \r\n            if (res.rows.length > 0) {\r\n                return 'El usuario inicio sesion satisfactoriamente'\r\n            } else {\r\n                return 'fallo'\r\n            }\r\n        }    \r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}