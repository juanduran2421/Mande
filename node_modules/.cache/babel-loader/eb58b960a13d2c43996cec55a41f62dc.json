{"ast":null,"code":"const {\n  Client\n} = require(\"pg\");\n\nconst express = require(\"express\");\n\nconst app = express();\napp.use(express.json());\nconst client = new Client({\n  user: \"postgres\",\n  password: \"postgres\",\n  host: \"localhost\",\n  port: 5433,\n  database: \"postgres\"\n});\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`));\napp.post(\"/todos\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    await createTodo(reqJson.todo);\n    result.success = true;\n  } catch (e) {\n    result.success = false;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/crearlabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id);\n    result.success = cre;\n  } catch (e) {\n    result.success = cre;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresarusuario\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarUsuario(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.genero, reqJson.password, reqJson.recibo, reqJson.fecha_nacimiento, reqJson.id_direccion, reqJson.longitud, reqJson.latitud);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresartrabajador\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarTrabajador(reqJson.email, reqJson.celular, reqJson.nombre, reqJson.email, reqJson.estado, reqJson.genero, reqJson.password, reqJson.fecha_nacimiento, reqJson.foto_documento, reqJson.foto_perfil, reqJson.id_direccion, reqJson.longitud, reqJson.latitud);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/metodoPago\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await MetodoPago(reqJson.forma_pago, reqJson.banco, reqJson.fecha_vencimiento, reqJson.cvv, reqJson.num_tarjeta, reqJson.id_usuario);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarTrabajadores\", async (req, res) => {\n  const rows = await listarTrabajadores();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerTrabajador\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerTrabajador(reqJson.id_trabajador);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerUsuario\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerUsuario(reqJson.id_usuario);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/obtenerLabor\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ObtenerLabor(reqJson.id_labor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/login\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await Login(reqJson.id, reqJson.password);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/actualizarTrabajador\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ActualizarTrabajador(reqJson.campo, reqJson.id_trabajador, reqJson.nuevoValor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/actualizarUsuario\", async (req, res) => {\n  const reqJson = req.body;\n  const rows = await ActualizarUsuario(reqJson.campo, reqJson.id_usuario, reqJson.nuevoValor);\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.post(\"/cambiarEstado\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.post(\"/ingresarPago\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await IngresarPago(reqJson.puntuacion_pago, reqJson.fecha_pago, reqJson.monto, reqJson.id_usuario, reqJson.id_trabajador, reqJson.id_labor, reqJson.horas);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarLabores\", async (req, res) => {\n  const rows = await ListarLabores();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/listarUsuarios\", async (req, res) => {\n  const rows = await ListarUsuarios();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.get(\"/listarPrecioLabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await ListarPrecioLabor(reqJson.id_labor);\n    result.success = cre;\n  } catch (e) {\n    result.success = cre;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await ListarPuntuacionDeLabor(reqJson.id_labor);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/promedioPuntuacion\", async (req, res) => {\n  const rows = await PromedioPuntuacion();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.post(\"/solicitarServicio\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await SolicitarServicio(reqJson.id_labor, reqJson.id_usuario, reqJson.id_trabajador, reqJson.descripcion);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.get(\"/laboresDisponibles\", async (req, res) => {\n  const rows = await LaboresDisponibles();\n  res.setHeader(\"content-type\", \"application/json\");\n  res.send(JSON.stringify(rows));\n});\napp.put(\"/asociarLabores\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    const cre = await AsociarLabores(reqJson.ids_labor, reqJson.id_trabajador, reqJson.precio);\n    result.success = cre;\n  } catch (e) {\n    result.success = \"fallo\";\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.delete(\"/todos\", async (req, res) => {\n  let result = {};\n\n  try {\n    const reqJson = req.body;\n    await deleteTodo(reqJson.id);\n    result.success = true;\n  } catch (e) {\n    result.success = false;\n  } finally {\n    res.setHeader(\"content-type\", \"application/json\");\n    res.send(JSON.stringify(result));\n  }\n});\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"));\nstart();\n\nasync function start() {\n  await connect();\n}\n\nasync function connect() {\n  try {\n    await client.connect();\n  } catch (e) {\n    console.error(`Failed to connect ${e}`);\n  }\n}\n\nasync function listarTrabajadores() {\n  try {\n    const results = await client.query(\"SELECT * FROM Trabajador\");\n    return results.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function createTodo(todoText) {\n  try {\n    await client.query(\"insert into todos (text) values ($1)\", [todoText]);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function deleteTodo(id) {\n  try {\n    await client.query(\"delete from todos where id = $1\", [id]);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento) {\n  try {\n    const text = \"INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);\";\n    const values = [id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento];\n    const res = await client.query(text, values);\n    return \"usuario creado con exito\";\n  } catch (e) {\n    return \"fallo al crear usuario\";\n  }\n}\n\nasync function CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil) {\n  try {\n    const text = \"INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\";\n    const values = [id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil];\n    const res = await client.query(text, values);\n    return \"trabajador creado con exito\";\n  } catch (e) {\n    return \"fallo al crear trabajador\";\n  }\n}\n\nasync function CrearLabor(nombre, id_labor) {\n  try {\n    const text = \"INSERT INTO Labor VALUES($1, $2);\";\n    const values = [nombre, id_labor];\n    const res = await client.query(text, values);\n    return \"labor creada con exito\";\n  } catch (e) {\n    return \"fallo al crear labor\";\n  }\n}\n\nasync function CrearDireccion(id_direccion, longitud, latitud) {\n  try {\n    const text = \"INSERT INTO direccion VALUES($1, $2, $3);\";\n    const values = [id_direccion, longitud, latitud];\n    const res = await client.query(text, values);\n    return \"direccion creada con exito\";\n  } catch (e) {\n    return \"fallo\";\n  }\n}\n\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\n  try {\n    const text = \"INSERT INTO DireccionTrabajador VALUES($1, $2);\";\n    const values = [id_direccion, id_trabajador];\n    const res = await client.query(text, values);\n    return \"asociar direccion a trabajador con exito\";\n  } catch (e) {\n    return \"fallo asociar direccion trabajador\";\n  }\n}\n\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\n  try {\n    const text = \"INSERT INTO DireccionUsuario VALUES($1, $2);\";\n    const values = [id_direccion, id_usuario];\n    const res = await client.query(text, values);\n    return \"asociar direccion a usuario con exito\";\n  } catch (e) {\n    return \"fallo asociar direccion usuario\";\n  }\n}\n\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\n  try {\n    const text = \"INSERT INTO LaborTrabajador VALUES($1, $2, $3);\";\n    const values = [id_labor, id_trabajador, precio];\n    const res = await client.query(text, values);\n    return \"asociar labor a trabajador con exito\";\n  } catch (e) {\n    return \"fallo asociar labor trabajador\";\n  }\n}\n\nasync function SolicitarServicio(id_labor, id_usuario, id_trabajador, descripcion) {\n  try {\n    const text = \"SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;\";\n    const values = [id_labor, id_trabajador];\n    const res = await client.query(text, values);\n\n    if (res.rows.length > 0) {\n      const newText = \"INSERT INTO Solicita VALUES($1, $2, $3, $4);\";\n      const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\n      const newRes = await client.query(newText, newValues);\n      return \"solicitud de servicio con exito\";\n    } else {\n      return \"El trabajador no está disponible para realizar esta labor\";\n    }\n  } catch (e) {\n    return \"fallo la solicitud\";\n  }\n}\n\nasync function IngresarPago(puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador, id_labor, horas) {\n  try {\n    const text = \"SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;\";\n    const values = [id_labor, id_trabajador, id_usuario];\n    const res = await client.query(text, values);\n\n    if (res.rows.length > 0) {\n      const precio_hora = res.rows[0].precio_labor_trabajador * horas;\n\n      if (monto < precio_hora) {\n        return \"El pago es menor de lo esperado\";\n      } else {\n        const newText = \"INSERT INTO Pago VALUES($1, $2, $3, $4, $5);\";\n        const newValues = [puntuacion_pago, fecha_pago, monto, id_usuario, id_trabajador];\n        const newRes = await client.query(newText, newValues);\n        return \"se pudo hacer el pago\";\n      }\n    } else {\n      return \"Ha ocurrido un error con el pago\";\n    }\n  } catch (e) {\n    return \"fallo el pago\";\n  }\n}\n\nasync function MetodoPago(forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario) {\n  try {\n    const text = \"INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);\";\n    const values = [forma_pago, banco, fecha_vencimiento, cvv, num_tarjeta, id_usuario];\n    const res = await client.query(text, values);\n    return \"metodo de pago ingresado con exito\";\n  } catch (e) {\n    return \"fallo el metodo de pago\";\n  }\n}\n\nasync function LaboresDisponibles() {\n  try {\n    const res = await client.query(\"SELECT * FROM Labor NATURAL JOIN LaborTrabajador\");\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function PromedioPuntuacion() {\n  try {\n    const res = await client.query(\"SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC\");\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function CambiarEstado(estado, id_trabajador) {\n  try {\n    const text = \"UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2\";\n    const values = [estado, id_trabajador];\n    const res = await client.query(text, values);\n    return \"estado cambiado con exito\";\n  } catch (e) {\n    return \"fallo el cambio de estado\";\n  }\n}\n\nasync function ListarPrecioLabor(id_labor) {\n  try {\n    const text = \"SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1\";\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ListarPuntuacionDeLabor(id_labor) {\n  try {\n    const text = \"SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1\";\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ListarUsuarios() {\n  try {\n    const res = await client.query(\"SELECT * FROM Usuario\");\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ListarLabores() {\n  try {\n    const res = await client.query(\"SELECT * FROM Labor\");\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ObtenerTrabajador(id_trabajador) {\n  try {\n    const text = \"SELECT * FROM Trabajador WHERE id_trabajador = $1\";\n    const value = [id_trabajador];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ObtenerUsuario(id_usuario) {\n  try {\n    const text = \"SELECT * FROM Usuario WHERE id_usuario = $1\";\n    const value = [id_usuario];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ObtenerLabor(id_labor) {\n  try {\n    const text = \"SELECT * FROM Labor WHERE id_labor = $1\";\n    const value = [id_labor];\n    const res = await client.query(text, value);\n    return res.rows;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\n  try {\n    const text = \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\n    const values = [nuevoValor, id_trabajador];\n    const res = await client.query(text, values);\n    return \"actualizado con exito\";\n  } catch (e) {\n    return \"fallo al actualizar\";\n  }\n}\n\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\n  try {\n    const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\n    const values = [nuevoValor, id_usuario];\n    const res = await client.query(text, values);\n    return \"actualizado con exito\";\n  } catch (e) {\n    return \"fallo al actualizar\";\n  }\n}\n\nasync function IngresarUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento, id_direccion, longitud, latitud) {\n  try {\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\n\n    if (creaDir === \"fallo\") {\n      return \"fallo direccion\";\n    }\n\n    const creaUser = await CrearUsuario(id_usuario, celular, nombre, email, genero, pass, recibo, fNacimiento);\n\n    if (creaUser === \"fallo al crear usuario\") {\n      return \"fallo usuario\";\n    }\n\n    const asocDirUser = await AsociarDireccionUsuario(id_direccion, id_usuario);\n\n    if (asocDirUser === \"fallo asociar direccion usuario\") {\n      return \"fallo asociar direccion usuario\";\n    }\n\n    return \"ingreso de usuario exitoso\";\n  } catch (e) {\n    return \"fallo con el ingreso de usuario\";\n  }\n}\n\nasync function IngresarTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil, id_direccion, longitud, latitud) {\n  try {\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\n\n    if (creaDir === \"fallo\") {\n      return \"fallo direccion\";\n    }\n\n    const creaTrab = await CrearTrabajador(id_trabajador, celular, nombre, email, estado, genero, pass, fNacimiento, fotoDocumento, fotoPerfil);\n\n    if (creaTrab === \"fallo al crear trabajador\") {\n      return \"fallo trabajador\";\n    }\n\n    const asocDirTrab = await AsociarDireccionTrabajador(id_direccion, id_trabajador);\n\n    if (asocDirTrab === \"fallo asociar direccion trabajador\") {\n      return \"fallo asociar direccion trabajador\";\n    }\n\n    return \"ingreso de trabj con exito\";\n  } catch (e) {\n    return \"fallo al ingresar trabajador\";\n  }\n}\n\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\n  try {\n    for (i = 0; i < ids_labor.length; i++) {\n      AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\n    }\n\n    return \"labores asociadas satisfactoriamente\";\n  } catch (e) {\n    return \"fallo\";\n  }\n}\n\nasync function Login(email, contraseña) {\n  try {\n    const text = \"SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2\";\n    const value = [email, contraseña];\n    const res = await client.query(text, value);\n\n    if (res.rows.length > 0) {\n      return \"El trabajador inicio sesion satisfactoriamente\";\n    } else {\n      const text = \"SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2\";\n      const value = [email, contraseña];\n      const res = await client.query(text, value);\n\n      if (res.rows.length > 0) {\n        return \"El usuario inicio sesion satisfactoriamente\";\n      } else {\n        return \"fallo\";\n      }\n    }\n  } catch (e) {\n    return [];\n  }\n}","map":{"version":3,"sources":["D:/Juanescacha/Archivos/Universidad/2019-II/Bases de Datos/PROYECTO FINAL/react/mande/src/server/server.js"],"names":["Client","require","express","app","use","json","client","user","password","host","port","database","get","req","res","sendFile","__dirname","post","result","reqJson","body","createTodo","todo","success","e","setHeader","send","JSON","stringify","cre","CrearLabor","nombre_labor","labor_id","IngresarUsuario","email","celular","nombre","genero","recibo","fecha_nacimiento","id_direccion","longitud","latitud","IngresarTrabajador","estado","foto_documento","foto_perfil","MetodoPago","forma_pago","banco","fecha_vencimiento","cvv","num_tarjeta","id_usuario","rows","listarTrabajadores","ObtenerTrabajador","id_trabajador","ObtenerUsuario","ObtenerLabor","id_labor","Login","id","put","ActualizarTrabajador","campo","nuevoValor","ActualizarUsuario","CambiarEstado","IngresarPago","puntuacion_pago","fecha_pago","monto","horas","ListarLabores","ListarUsuarios","ListarPrecioLabor","ListarPuntuacionDeLabor","PromedioPuntuacion","SolicitarServicio","descripcion","LaboresDisponibles","AsociarLabores","ids_labor","precio","delete","deleteTodo","listen","console","log","start","connect","error","results","query","todoText","CrearUsuario","pass","fNacimiento","text","values","CrearTrabajador","fotoDocumento","fotoPerfil","CrearDireccion","AsociarDireccionTrabajador","AsociarDireccionUsuario","AsociarLaborTrabajador","length","newText","newValues","newRes","precio_hora","precio_labor_trabajador","value","creaDir","creaUser","asocDirUser","creaTrab","asocDirTrab","i","contraseña"],"mappings":"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","sourcesContent":["const { Client } = require(\"pg\");\r\nconst express = require(\"express\");\r\nconst app = express();\r\napp.use(express.json());\r\n\r\nconst client = new Client({\r\n  user: \"postgres\",\r\n  password: \"postgres\",\r\n  host: \"localhost\",\r\n  port: 5433,\r\n  database: \"postgres\",\r\n});\r\n\r\napp.get(\"/\", (req, res) => res.sendFile(`${__dirname}/melito.html`));\r\n\r\napp.post(\"/todos\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    await createTodo(reqJson.todo);\r\n    result.success = true;\r\n  } catch (e) {\r\n    result.success = false;\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.post(\"/crearlabor\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await CrearLabor(reqJson.nombre_labor, reqJson.labor_id);\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = cre;\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.post(\"/ingresarusuario\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await IngresarUsuario(\r\n      reqJson.email,\r\n      reqJson.celular,\r\n      reqJson.nombre,\r\n      reqJson.email,\r\n      reqJson.genero,\r\n      reqJson.password,\r\n      reqJson.recibo,\r\n      reqJson.fecha_nacimiento,\r\n      reqJson.id_direccion,\r\n      reqJson.longitud,\r\n      reqJson.latitud\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.post(\"/ingresartrabajador\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await IngresarTrabajador(\r\n      reqJson.email,\r\n      reqJson.celular,\r\n      reqJson.nombre,\r\n      reqJson.email,\r\n      reqJson.estado,\r\n      reqJson.genero,\r\n      reqJson.password,\r\n      reqJson.fecha_nacimiento,\r\n      reqJson.foto_documento,\r\n      reqJson.foto_perfil,\r\n      reqJson.id_direccion,\r\n      reqJson.longitud,\r\n      reqJson.latitud\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.post(\"/metodoPago\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await MetodoPago(\r\n      reqJson.forma_pago,\r\n      reqJson.banco,\r\n      reqJson.fecha_vencimiento,\r\n      reqJson.cvv,\r\n      reqJson.num_tarjeta,\r\n      reqJson.id_usuario\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.get(\"/listarTrabajadores\", async (req, res) => {\r\n  const rows = await listarTrabajadores();\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/obtenerTrabajador\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await ObtenerTrabajador(reqJson.id_trabajador);\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/obtenerUsuario\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await ObtenerUsuario(reqJson.id_usuario);\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/obtenerLabor\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await ObtenerLabor(reqJson.id_labor);\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/login\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await Login(reqJson.id, reqJson.password);\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.put(\"/actualizarTrabajador\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await ActualizarTrabajador(\r\n    reqJson.campo,\r\n    reqJson.id_trabajador,\r\n    reqJson.nuevoValor\r\n  );\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.put(\"/actualizarUsuario\", async (req, res) => {\r\n  const reqJson = req.body;\r\n  const rows = await ActualizarUsuario(\r\n    reqJson.campo,\r\n    reqJson.id_usuario,\r\n    reqJson.nuevoValor\r\n  );\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.post(\"/cambiarEstado\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await CambiarEstado(reqJson.estado, reqJson.id_trabajador);\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.post(\"/ingresarPago\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await IngresarPago(\r\n      reqJson.puntuacion_pago,\r\n      reqJson.fecha_pago,\r\n      reqJson.monto,\r\n      reqJson.id_usuario,\r\n      reqJson.id_trabajador,\r\n      reqJson.id_labor,\r\n      reqJson.horas\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.get(\"/listarLabores\", async (req, res) => {\r\n  const rows = await ListarLabores();\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/listarUsuarios\", async (req, res) => {\r\n  const rows = await ListarUsuarios();\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.get(\"/listarPrecioLabor\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await ListarPrecioLabor(reqJson.id_labor);\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = cre;\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.get(\"/listarPuntuacionDeLabor\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await ListarPuntuacionDeLabor(reqJson.id_labor);\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.get(\"/promedioPuntuacion\", async (req, res) => {\r\n  const rows = await PromedioPuntuacion();\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.post(\"/solicitarServicio\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await SolicitarServicio(\r\n      reqJson.id_labor,\r\n      reqJson.id_usuario,\r\n      reqJson.id_trabajador,\r\n      reqJson.descripcion\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.get(\"/laboresDisponibles\", async (req, res) => {\r\n  const rows = await LaboresDisponibles();\r\n  res.setHeader(\"content-type\", \"application/json\");\r\n  res.send(JSON.stringify(rows));\r\n});\r\n\r\napp.put(\"/asociarLabores\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    const cre = await AsociarLabores(\r\n      reqJson.ids_labor,\r\n      reqJson.id_trabajador,\r\n      reqJson.precio\r\n    );\r\n    result.success = cre;\r\n  } catch (e) {\r\n    result.success = \"fallo\";\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.delete(\"/todos\", async (req, res) => {\r\n  let result = {};\r\n  try {\r\n    const reqJson = req.body;\r\n    await deleteTodo(reqJson.id);\r\n    result.success = true;\r\n  } catch (e) {\r\n    result.success = false;\r\n  } finally {\r\n    res.setHeader(\"content-type\", \"application/json\");\r\n    res.send(JSON.stringify(result));\r\n  }\r\n});\r\n\r\napp.listen(8080, () => console.log(\"Web server is listening.. on port 8080\"));\r\n\r\nstart();\r\n\r\nasync function start() {\r\n  await connect();\r\n}\r\n\r\nasync function connect() {\r\n  try {\r\n    await client.connect();\r\n  } catch (e) {\r\n    console.error(`Failed to connect ${e}`);\r\n  }\r\n}\r\n\r\nasync function listarTrabajadores() {\r\n  try {\r\n    const results = await client.query(\"SELECT * FROM Trabajador\");\r\n    return results.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function createTodo(todoText) {\r\n  try {\r\n    await client.query(\"insert into todos (text) values ($1)\", [todoText]);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function deleteTodo(id) {\r\n  try {\r\n    await client.query(\"delete from todos where id = $1\", [id]);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function CrearUsuario(\r\n  id_usuario,\r\n  celular,\r\n  nombre,\r\n  email,\r\n  genero,\r\n  pass,\r\n  recibo,\r\n  fNacimiento\r\n) {\r\n  try {\r\n    const text = \"INSERT INTO USUARIO VALUES($1, $2, $3, $4, $5, $6, $7, $8);\";\r\n    const values = [\r\n      id_usuario,\r\n      celular,\r\n      nombre,\r\n      email,\r\n      genero,\r\n      pass,\r\n      recibo,\r\n      fNacimiento,\r\n    ];\r\n    const res = await client.query(text, values);\r\n    return \"usuario creado con exito\";\r\n  } catch (e) {\r\n    return \"fallo al crear usuario\";\r\n  }\r\n}\r\n\r\nasync function CrearTrabajador(\r\n  id_trabajador,\r\n  celular,\r\n  nombre,\r\n  email,\r\n  estado,\r\n  genero,\r\n  pass,\r\n  fNacimiento,\r\n  fotoDocumento,\r\n  fotoPerfil\r\n) {\r\n  try {\r\n    const text =\r\n      \"INSERT INTO Trabajador VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\";\r\n    const values = [\r\n      id_trabajador,\r\n      celular,\r\n      nombre,\r\n      email,\r\n      estado,\r\n      genero,\r\n      pass,\r\n      fNacimiento,\r\n      fotoDocumento,\r\n      fotoPerfil,\r\n    ];\r\n    const res = await client.query(text, values);\r\n    return \"trabajador creado con exito\";\r\n  } catch (e) {\r\n    return \"fallo al crear trabajador\";\r\n  }\r\n}\r\n\r\nasync function CrearLabor(nombre, id_labor) {\r\n  try {\r\n    const text = \"INSERT INTO Labor VALUES($1, $2);\";\r\n    const values = [nombre, id_labor];\r\n    const res = await client.query(text, values);\r\n    return \"labor creada con exito\";\r\n  } catch (e) {\r\n    return \"fallo al crear labor\";\r\n  }\r\n}\r\n\r\nasync function CrearDireccion(id_direccion, longitud, latitud) {\r\n  try {\r\n    const text = \"INSERT INTO direccion VALUES($1, $2, $3);\";\r\n    const values = [id_direccion, longitud, latitud];\r\n    const res = await client.query(text, values);\r\n    return \"direccion creada con exito\";\r\n  } catch (e) {\r\n    return \"fallo\";\r\n  }\r\n}\r\n\r\nasync function AsociarDireccionTrabajador(id_direccion, id_trabajador) {\r\n  try {\r\n    const text = \"INSERT INTO DireccionTrabajador VALUES($1, $2);\";\r\n    const values = [id_direccion, id_trabajador];\r\n    const res = await client.query(text, values);\r\n    return \"asociar direccion a trabajador con exito\";\r\n  } catch (e) {\r\n    return \"fallo asociar direccion trabajador\";\r\n  }\r\n}\r\n\r\nasync function AsociarDireccionUsuario(id_direccion, id_usuario) {\r\n  try {\r\n    const text = \"INSERT INTO DireccionUsuario VALUES($1, $2);\";\r\n    const values = [id_direccion, id_usuario];\r\n    const res = await client.query(text, values);\r\n    return \"asociar direccion a usuario con exito\";\r\n  } catch (e) {\r\n    return \"fallo asociar direccion usuario\";\r\n  }\r\n}\r\n\r\nasync function AsociarLaborTrabajador(id_labor, id_trabajador, precio) {\r\n  try {\r\n    const text = \"INSERT INTO LaborTrabajador VALUES($1, $2, $3);\";\r\n    const values = [id_labor, id_trabajador, precio];\r\n    const res = await client.query(text, values);\r\n    return \"asociar labor a trabajador con exito\";\r\n  } catch (e) {\r\n    return \"fallo asociar labor trabajador\";\r\n  }\r\n}\r\n\r\nasync function SolicitarServicio(\r\n  id_labor,\r\n  id_usuario,\r\n  id_trabajador,\r\n  descripcion\r\n) {\r\n  try {\r\n    const text =\r\n      \"SELECT * FROM LaborTrabajador WHERE id_labor = $1 AND id_trabajador = $2;\";\r\n    const values = [id_labor, id_trabajador];\r\n    const res = await client.query(text, values);\r\n\r\n    if (res.rows.length > 0) {\r\n      const newText = \"INSERT INTO Solicita VALUES($1, $2, $3, $4);\";\r\n      const newValues = [id_labor, id_usuario, id_trabajador, descripcion];\r\n      const newRes = await client.query(newText, newValues);\r\n      return \"solicitud de servicio con exito\";\r\n    } else {\r\n      return \"El trabajador no está disponible para realizar esta labor\";\r\n    }\r\n  } catch (e) {\r\n    return \"fallo la solicitud\";\r\n  }\r\n}\r\n\r\nasync function IngresarPago(\r\n  puntuacion_pago,\r\n  fecha_pago,\r\n  monto,\r\n  id_usuario,\r\n  id_trabajador,\r\n  id_labor,\r\n  horas\r\n) {\r\n  try {\r\n    const text =\r\n      \"SELECT precio_labor_trabajador FROM laborTrabajador NATURAL JOIN Solicita WHERE id_labor = $1 AND id_trabajador = $2 AND id_usuario = $3;\";\r\n    const values = [id_labor, id_trabajador, id_usuario];\r\n    const res = await client.query(text, values);\r\n\r\n    if (res.rows.length > 0) {\r\n      const precio_hora = res.rows[0].precio_labor_trabajador * horas;\r\n      if (monto < precio_hora) {\r\n        return \"El pago es menor de lo esperado\";\r\n      } else {\r\n        const newText = \"INSERT INTO Pago VALUES($1, $2, $3, $4, $5);\";\r\n        const newValues = [\r\n          puntuacion_pago,\r\n          fecha_pago,\r\n          monto,\r\n          id_usuario,\r\n          id_trabajador,\r\n        ];\r\n        const newRes = await client.query(newText, newValues);\r\n        return \"se pudo hacer el pago\";\r\n      }\r\n    } else {\r\n      return \"Ha ocurrido un error con el pago\";\r\n    }\r\n  } catch (e) {\r\n    return \"fallo el pago\";\r\n  }\r\n}\r\n\r\nasync function MetodoPago(\r\n  forma_pago,\r\n  banco,\r\n  fecha_vencimiento,\r\n  cvv,\r\n  num_tarjeta,\r\n  id_usuario\r\n) {\r\n  try {\r\n    const text = \"INSERT INTO MetodoPago VALUES($1, $2, $3, $4, $5, $6);\";\r\n    const values = [\r\n      forma_pago,\r\n      banco,\r\n      fecha_vencimiento,\r\n      cvv,\r\n      num_tarjeta,\r\n      id_usuario,\r\n    ];\r\n    const res = await client.query(text, values);\r\n    return \"metodo de pago ingresado con exito\";\r\n  } catch (e) {\r\n    return \"fallo el metodo de pago\";\r\n  }\r\n}\r\n\r\nasync function LaboresDisponibles() {\r\n  try {\r\n    const res = await client.query(\r\n      \"SELECT * FROM Labor NATURAL JOIN LaborTrabajador\"\r\n    );\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function PromedioPuntuacion() {\r\n  try {\r\n    const res = await client.query(\r\n      \"SELECT id_trabajador, puntuacion FROM PROMEDIODEPUNTUACION ORDER BY puntuacion DESC\"\r\n    );\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function CambiarEstado(estado, id_trabajador) {\r\n  try {\r\n    const text =\r\n      \"UPDATE Trabajador SET estado_trabajador = $1 WHERE id_trabajador = $2\";\r\n    const values = [estado, id_trabajador];\r\n    const res = await client.query(text, values);\r\n    return \"estado cambiado con exito\";\r\n  } catch (e) {\r\n    return \"fallo el cambio de estado\";\r\n  }\r\n}\r\n\r\nasync function ListarPrecioLabor(id_labor) {\r\n  try {\r\n    const text =\r\n      \"SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PRECIO_LABOR_TRABAJADOR FROM TRABAJADOR_LABOR_PRECIO NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1\";\r\n    const value = [id_labor];\r\n    const res = await client.query(text, value);\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ListarPuntuacionDeLabor(id_labor) {\r\n  try {\r\n    const text =\r\n      \"SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, PUNTUACION FROM TRABAJADORLABOR_PUNTUACION NATURAL JOIN TRABAJADOR WHERE ID_LABOR = $1\";\r\n    const value = [id_labor];\r\n    const res = await client.query(text, value);\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ListarUsuarios() {\r\n  try {\r\n    const res = await client.query(\"SELECT * FROM Usuario\");\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ListarLabores() {\r\n  try {\r\n    const res = await client.query(\"SELECT * FROM Labor\");\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ObtenerTrabajador(id_trabajador) {\r\n  try {\r\n    const text = \"SELECT * FROM Trabajador WHERE id_trabajador = $1\";\r\n    const value = [id_trabajador];\r\n    const res = await client.query(text, value);\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ObtenerUsuario(id_usuario) {\r\n  try {\r\n    const text = \"SELECT * FROM Usuario WHERE id_usuario = $1\";\r\n    const value = [id_usuario];\r\n    const res = await client.query(text, value);\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ObtenerLabor(id_labor) {\r\n  try {\r\n    const text = \"SELECT * FROM Labor WHERE id_labor = $1\";\r\n    const value = [id_labor];\r\n    const res = await client.query(text, value);\r\n    return res.rows;\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ActualizarTrabajador(campo, id_trabajador, nuevoValor) {\r\n  try {\r\n    const text =\r\n      \"UPDATE Trabajador SET \" + campo + \" = $1 WHERE id_trabajador = $2\";\r\n    const values = [nuevoValor, id_trabajador];\r\n    const res = await client.query(text, values);\r\n    return \"actualizado con exito\";\r\n  } catch (e) {\r\n    return \"fallo al actualizar\";\r\n  }\r\n}\r\n\r\nasync function ActualizarUsuario(campo, id_usuario, nuevoValor) {\r\n  try {\r\n    const text = \"UPDATE Usuario SET \" + campo + \" = $1 WHERE id_usuario = $2\";\r\n    const values = [nuevoValor, id_usuario];\r\n    const res = await client.query(text, values);\r\n    return \"actualizado con exito\";\r\n  } catch (e) {\r\n    return \"fallo al actualizar\";\r\n  }\r\n}\r\n\r\nasync function IngresarUsuario(\r\n  id_usuario,\r\n  celular,\r\n  nombre,\r\n  email,\r\n  genero,\r\n  pass,\r\n  recibo,\r\n  fNacimiento,\r\n  id_direccion,\r\n  longitud,\r\n  latitud\r\n) {\r\n  try {\r\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\r\n    if (creaDir === \"fallo\") {\r\n      return \"fallo direccion\";\r\n    }\r\n\r\n    const creaUser = await CrearUsuario(\r\n      id_usuario,\r\n      celular,\r\n      nombre,\r\n      email,\r\n      genero,\r\n      pass,\r\n      recibo,\r\n      fNacimiento\r\n    );\r\n    if (creaUser === \"fallo al crear usuario\") {\r\n      return \"fallo usuario\";\r\n    }\r\n\r\n    const asocDirUser = await AsociarDireccionUsuario(id_direccion, id_usuario);\r\n    if (asocDirUser === \"fallo asociar direccion usuario\") {\r\n      return \"fallo asociar direccion usuario\";\r\n    }\r\n\r\n    return \"ingreso de usuario exitoso\";\r\n  } catch (e) {\r\n    return \"fallo con el ingreso de usuario\";\r\n  }\r\n}\r\n\r\nasync function IngresarTrabajador(\r\n  id_trabajador,\r\n  celular,\r\n  nombre,\r\n  email,\r\n  estado,\r\n  genero,\r\n  pass,\r\n  fNacimiento,\r\n  fotoDocumento,\r\n  fotoPerfil,\r\n  id_direccion,\r\n  longitud,\r\n  latitud\r\n) {\r\n  try {\r\n    const creaDir = await CrearDireccion(id_direccion, longitud, latitud);\r\n    if (creaDir === \"fallo\") {\r\n      return \"fallo direccion\";\r\n    }\r\n\r\n    const creaTrab = await CrearTrabajador(\r\n      id_trabajador,\r\n      celular,\r\n      nombre,\r\n      email,\r\n      estado,\r\n      genero,\r\n      pass,\r\n      fNacimiento,\r\n      fotoDocumento,\r\n      fotoPerfil\r\n    );\r\n    if (creaTrab === \"fallo al crear trabajador\") {\r\n      return \"fallo trabajador\";\r\n    }\r\n\r\n    const asocDirTrab = await AsociarDireccionTrabajador(\r\n      id_direccion,\r\n      id_trabajador\r\n    );\r\n    if (asocDirTrab === \"fallo asociar direccion trabajador\") {\r\n      return \"fallo asociar direccion trabajador\";\r\n    }\r\n\r\n    return \"ingreso de trabj con exito\";\r\n  } catch (e) {\r\n    return \"fallo al ingresar trabajador\";\r\n  }\r\n}\r\n\r\nasync function AsociarLabores(ids_labor, id_trabajador, precio) {\r\n  try {\r\n    for (i = 0; i < ids_labor.length; i++) {\r\n      AsociarLaborTrabajador(ids_labor[i], id_trabajador, precio);\r\n    }\r\n    return \"labores asociadas satisfactoriamente\";\r\n  } catch (e) {\r\n    return \"fallo\";\r\n  }\r\n}\r\n\r\nasync function Login(email, contraseña) {\r\n  try {\r\n    const text =\r\n      \"SELECT * FROM Trabajador WHERE id_trabajador = $1 AND password_trabajador = $2\";\r\n    const value = [email, contraseña];\r\n    const res = await client.query(text, value);\r\n\r\n    if (res.rows.length > 0) {\r\n      return \"El trabajador inicio sesion satisfactoriamente\";\r\n    } else {\r\n      const text =\r\n        \"SELECT * FROM Usuario WHERE id_usuario = $1 AND password_usuario = $2\";\r\n      const value = [email, contraseña];\r\n      const res = await client.query(text, value);\r\n\r\n      if (res.rows.length > 0) {\r\n        return \"El usuario inicio sesion satisfactoriamente\";\r\n      } else {\r\n        return \"fallo\";\r\n      }\r\n    }\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}